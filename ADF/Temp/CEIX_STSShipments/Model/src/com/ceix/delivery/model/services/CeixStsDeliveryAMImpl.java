package com.ceix.delivery.model.services;

import com.ceix.delivery.model.services.webserviceclient.PoReceiptBean;
import com.ceix.delivery.model.services.webserviceclient.STSWebServices;
import com.ceix.delivery.model.views.CeixStsContractItemsVOImpl;
import com.ceix.delivery.model.views.CeixStsDeliveryHeaderDeleteTrainVoImpl;
import com.ceix.delivery.model.views.CeixStsDeliveryHeaderVOImpl;
import com.ceix.delivery.model.views.CeixStsDeliveryHeaderVORowImpl;
import com.ceix.delivery.model.views.CeixStsDeliveryLinesVOImpl;
import com.ceix.delivery.model.views.CeixStsDeliveryLinesVORowImpl;

import com.ceix.delivery.model.views.CeixStsDeliverySearchVOImpl;
import com.ceix.delivery.model.views.CeixStsWaybillBtmoreHdrViewImpl;
import com.ceix.delivery.model.views.CeixStsWaybillBtmoreHdrViewRowImpl;

import com.ceix.delivery.model.views.CeixStsWaybillBtmoreLinesViewImpl;

import com.ceix.delivery.model.views.CeixStsWaybillBtmoreLinesViewRowImpl;

//import com.oracle.xmlns.apps.scm.doo.decomposition.orderdetailservices.orderinformationservice.Order;

import com.ceix.delivery.model.views.DestinationVOImpl;
import com.ceix.delivery.model.views.LoadOriginVOImpl;

import java.math.BigDecimal;

import java.sql.SQLException;

import java.util.logging.Level;

import oracle.adf.share.logging.ADFLogger;

import oracle.jbo.Row;
import oracle.jbo.RowSetIterator;
import oracle.jbo.ViewObject;
import oracle.jbo.domain.Date;
import oracle.jbo.domain.Number;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.ViewLinkImpl;


import oracle.jbo.server.ViewObjectImpl;

import oracle.ods.virtualization.schema.ConversionUtil;

import com.oracle.xmlns.apps.scm.fom.importorders.orderimportservice.OrderImportRequest;

import com.oracle.xmlns.apps.scm.fom.importorders.orderimportservice.OrderImportResponse;

import com.oracle.xmlns.apps.scm.inventory.materialtransactions.pendingtransactions.stagedinventorytransactionservicev2.StagedInventoryTransaction;
import com.oracle.xmlns.apps.scm.receiving.receiptsinterface.transactions.processorservicev2.StagedReceivingHeader;
import com.oracle.xmlns.apps.scm.shipping.shipconfirm.deliveries.shipmentlineservice.ShipmentLineInformation;

import com.oracle.xmlns.apps.scm.shipping.shipconfirm.deliveries.shipmentlineservice.UpdateShipmentLinesResponse;

import java.math.RoundingMode;

import java.sql.CallableStatement;
import java.sql.Types;

import java.util.ArrayList;
import java.util.List;

// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Mon May 07 11:31:58 CDT 2018
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class CeixStsDeliveryAMImpl extends ApplicationModuleImpl {

    private static ADFLogger _logger = ADFLogger.createADFLogger(CeixStsDeliveryAMImpl.class);

    /**
     * This is the default constructor (do not remove).
     */
    public CeixStsDeliveryAMImpl() {
    }

    /**
     * Container's getter for CeixStsDeliveryHeaderVO1.
     * @return CeixStsDeliveryHeaderVO1
     */
    public CeixStsDeliveryHeaderVOImpl getCeixStsDeliveryHeaderVO1() {
        return (CeixStsDeliveryHeaderVOImpl) findViewObject("CeixStsDeliveryHeaderVO1");
    }

    /**
     * Container's getter for CeixStsDeliveryLinesVO1.
     * @return CeixStsDeliveryLinesVO1
     */
    public CeixStsDeliveryLinesVOImpl getCeixStsDeliveryLinesVO1() {
        return (CeixStsDeliveryLinesVOImpl) findViewObject("CeixStsDeliveryLinesVO1");
    }

    /**
     * Container's getter for CeixStsDeliveryHeaderVO2.
     * @return CeixStsDeliveryHeaderVO2
     */
    public CeixStsDeliveryHeaderVOImpl getCeixStsDeliveryHeaderVO2() {
        return (CeixStsDeliveryHeaderVOImpl) findViewObject("CeixStsDeliveryHeaderVO2");
    }

    /**
     * Container's getter for CeixStsDeliveryLinesVO2.
     * @return CeixStsDeliveryLinesVO2
     */
    public CeixStsDeliveryLinesVOImpl getCeixStsDeliveryLinesVO2() {
        return (CeixStsDeliveryLinesVOImpl) findViewObject("CeixStsDeliveryLinesVO2");
    }

    /**
     * Container's getter for CeixStsDeliverySearchVO1.
     * @return CeixStsDeliverySearchVO1
     */
    public ViewObjectImpl getCeixStsDeliverySearchVO1() {
        return (ViewObjectImpl) findViewObject("CeixStsDeliverySearchVO1");
    }

    /**
     * Container's getter for CeixStsDeliveryHeaderLineVL.
     * @return CeixStsDeliveryHeaderLineVL
     */
    public ViewLinkImpl getCeixStsDeliveryHeaderLineVL() {
        return (ViewLinkImpl) findViewLink("CeixStsDeliveryHeaderLineVL");
    }

    public String initVO() {
        ViewObject searchvo = getCeixStsDeliverySearchVO1();
        searchvo.reset();
        searchvo.clearCache();
        //searchvo.setNamedWhereClauseParam("pOrderNum", "kkll");
        searchvo.executeEmptyRowSet();
        ViewObject linevo = getCeixStsDeliveryLinesVO1();
        linevo.reset();
        linevo.clearCache();
        //searchvo.setNamedWhereClauseParam("pOrderNum", "kkll");
        linevo.executeEmptyRowSet();
        return "start";
    }

    public void handleSelectCheckBox(boolean flag) {
        int i = 0;
        ViewObject vo = findViewObject("CeixStsDeliveryLinesVO1");
        if (vo.getRowCount() > 0) {
            vo.first();
            RowSetIterator rowItr = vo.createRowSetIterator(null);
            while (rowItr.hasNext()) {
                CeixStsDeliveryLinesVORowImpl tsRow = (CeixStsDeliveryLinesVORowImpl) rowItr.next();
                if (tsRow.getShipmentNumber() == null) {
                    System.out.println("The shipment is :" + tsRow.getSequenceNum());
                    if (tsRow.getAttribute("ShipmentNumber") == null) {
                        tsRow.setSelectFLag(flag);
                    }
                }
            }
            rowItr.closeRowSetIterator();
        }
    }

    public String callPickWaveServiceImpl(String p_orderNo, String p_sourceSystemName, String p_shipFromOrganization,
                                          String p_orderType, String p_releaseRule) {
        String pickwaveNum = "";
        STSWebServices sTSWebServices = new STSWebServices();
        pickwaveNum =
            sTSWebServices.callPickWaveService(p_orderNo, p_sourceSystemName, p_shipFromOrganization, p_orderType,
                                               p_releaseRule);

        return pickwaveNum;
    }

    public String callProcessReleasePickBatchImpl(String pickBatch, String p_releaseMode) {
        String pickRelease = "";
        STSWebServices sTSWebServices = new STSWebServices();
        pickRelease = sTSWebServices.callProcessReleasePickBatch(pickBatch, p_releaseMode);

        return pickRelease;
    }

    public String callRunReportImpl(String salesOrderNumbr) {
        //List<DeliveryDetails> delList = new ArrayList<DeliveryDetails>();
        String delLine = null;
        STSWebServices sTSWebServices = new STSWebServices();
        delLine = sTSWebServices.callRunReport(salesOrderNumbr);
        return delLine;
    }

    /*public long callESSJobImpl(String salesOrderNumbr) {
        long requestId = 0;
        STSWebServices sTSWebServices = new STSWebServices();
        requestId = sTSWebServices.callESSJob(salesOrderNumbr);
        return requestId;
    }*/

    public String callCreateShipmentRequestServiceImpl(String shipmentName, String shipFromOrganization,
                                                       String p_customerNumber, String p_shipToPartySiteNumber,
                                                       String p_loadDate, BigDecimal p_weightTons, String carrier) {
        String status = null;
        STSWebServices sTSWebServices = new STSWebServices();
        status =
            sTSWebServices.callProcessCreateUpdateShipmentService(shipmentName, shipFromOrganization, p_customerNumber,
                                                                  p_shipToPartySiteNumber, p_loadDate, p_weightTons,carrier);
        return status;
    }

    public String createBTMoreRecordsForCopyToWaybill(Row selectedDeliveryHeaderRow, oracle.jbo.domain.Date dumpedDate,
                                                      String comments, String pile, String dumpedTons) {

        String response = "";
        _logger.log(Level.FINER, ">>createBTMoreRecordsForCopyToWaybill");
        _logger.log(Level.SEVERE, ">>createBTMoreRecordsForCopyToWaybill");
        
        String trainNum =
            selectedDeliveryHeaderRow.getAttribute("UnitTrainNumber") != null ?
            selectedDeliveryHeaderRow.getAttribute("UnitTrainNumber").toString() : null;
        
    /*    String deliveryHeaderId =
            selectedDeliveryHeaderRow.getAttribute("DeliveryHeaderId") .toString();*/
            //!= null ?
           // selectedDeliveryHeaderRow.getAttribute("UnitTrainNumber").toString() : null;
        
    //    oracle.jbo.domain.Number deliveryHeaderId=selectedDeliveryHeaderRow.getAttribute("DeliveryHeaderId");

  //  Long l = new Long(15552451L);
  //  double d = l.doubleValue();

        //save the btmore header
        boolean headerRecordWasFound = false;
        //check if record already exists
        CeixStsWaybillBtmoreHdrViewRowImpl headerRow =
            getBTMOREHeaderRecordByKeysForCopyToWaybill(trainNum, dumpedDate);
        //set a flag which can tell us later if header was already found
        if (headerRow != null)
            headerRecordWasFound = true;

        ViewObject vol = this.getCeixStsDeliveryLinesVO1();
        
        RowSetIterator rsIterator = vol.createRowSetIterator(null);
        
        long rowCount=vol.getEstimatedRowCount();
    //    CeixStsWaybillAMImpl appM = (CeixStsWaybillAMImpl) dc.getDataProvider();
        
        String copyDumpedTons="";
        String lastCarstr="";
        if (dumpedTons != null){
        Double  tons=Double.parseDouble(dumpedTons); 
            BigDecimal LineVariance = new BigDecimal(0);
           // BigDecimal tons = new BigDecimal(0);
           BigDecimal lastCarTonsDiff = new BigDecimal(0);
            BigDecimal lastCarTons = new BigDecimal(0);
      /*          CallableStatement statement = null;
                try {
                    statement =
                        appM.getDBTransaction()
                        .createCallableStatement(" BEGIN" + " SELECT MAX(TO_NUMBER(SEQUENCE_NUM))"
          +  " INTO :1 " +
                "FROM CEIX_STS_DELIVERY_LINES"
           + " WHERE DELIVERY_HEADER_ID = '" +
            deliveryHeaderId + 
            "' and UNIT_TRAIN_NUMBER= '"+
            trainNum+ " END;", 0);
            statement.registerOutParameter(1, Types.INTEGER);
            statement.execute();
             int maxSeqNum = statement.getInt(1);
            } catch (SQLException e) {
                e.printStackTrace();
            } finally {
                try {
                    statement.close();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }*/
  

       Double  equalTons =getUniformTons( rowCount,tons);
     //  BigDecimal TonsBigDecimal = BigDecimal.valueOf(equalTons);
     Double toGetDiff=equalTons*rowCount;
     BigDecimal bGequalTons = BigDecimal.valueOf(equalTons);
            BigDecimal bGTons = BigDecimal.valueOf(tons);
            BigDecimal bGDiffTons = BigDecimal.valueOf(toGetDiff);
      copyDumpedTons=Double. toString(equalTons);
       //     Variance = totalweight.subtract(tons);
        //    LineVariance = bGequalTons.subtract(bGTons);
            lastCarTonsDiff=bGTons.subtract(bGDiffTons);
       //     lastCarTons=bGTons.add(lastCarTonsDiff);
            lastCarTons=bGequalTons.add(lastCarTonsDiff);
            
            if(lastCarTons!=null){ //Added by Manasa Yalamarthy as to avoid null pointer exception
           lastCarstr=lastCarTons.toString();  
            }
       //     String lastCarstr="118.5866";
            
            //(bGTons+lastCarTonsDiff);
    //        Double AdjustedTons = tons.subtract(equalTons);
   //   Double AdjustedTons=
     //   BigDecimal bd = new BigDecimal(equalTons).setScale(5, RoundingMode.HALF_EVEN);
         //copyDumpedTons=BigDecimal. toString(bd);
        //    double formequalTons = bd.doubleValue();
    //    String 
 //   copyDumpedTons=Double. toString(formequalTons);
        }
     // String lastCarstr="118.5866";
     //   String lastCarstr=lastCarTons.toString();  
        try {
            headerRow = saveBTMOREHeaderForCopyToWaybill(headerRow, selectedDeliveryHeaderRow, dumpedDate);


            //save the btmore lines
            rsIterator.reset();
            int i=1;
            while (rsIterator.hasNext()) {

              System.out.println(rsIterator.hasNext());
            //    (rsIterator.hasNext()
                CeixStsDeliveryLinesVORowImpl stdDeliveryLine = (CeixStsDeliveryLinesVORowImpl) rsIterator.next();
                _logger.log(Level.FINER, ">>Processing sts delivery line id : " + stdDeliveryLine.getDeliveryLineId());
                String cpWaybillFlag= stdDeliveryLine.getCpWaybillFlag();
                String Seq=
                    stdDeliveryLine.getSequenceNum();
                int seqNum=Integer.parseInt(Seq);  
                
                
      
                
                //String salesOrderNumber = stdDeliveryLine.getSalesOrderNumber();
                //System.out.println("salesOrderNumber: "+salesOrderNumber);
                //save the btmore lines
                if(i==rowCount){
                    saveBTMORELinesForCopyToWaybill(headerRecordWasFound, headerRow.getDeliveryHeaderId(), stdDeliveryLine,
                                                    trainNum, comments, pile,lastCarstr);
                }
                else{
                    saveBTMORELinesForCopyToWaybill(headerRecordWasFound, headerRow.getDeliveryHeaderId(), stdDeliveryLine,
                                                    trainNum, comments, pile,copyDumpedTons);
                }
               
                saveSTSDeliveryLinesWithCopyFlag(headerRecordWasFound,stdDeliveryLine,trainNum, cpWaybillFlag);
                i++;
            }
        
            persistRecordsBTMORERecordsForCopyToWaybill();
            PersistSTSDeliveryLinesWithCopyFlag();
            response = "success";
        } catch (Exception e) {
            e.printStackTrace();
            _logger.log(Level.SEVERE, ">>Unexpected error while processing copy to waybill: " + e.getMessage());
            rollbackRecordsBTMORERecordsForCopyToWaybill();
            response =
                "Unexpected error while processing. Please check server logs for more details. : " + e.getMessage();
        } finally {
            rsIterator.closeRowSetIterator();
        }
        return response;
    }

    private void persistRecordsBTMORERecordsForCopyToWaybill() {


        _logger.log(Level.FINER, "Committing records");
        CeixStsWaybillBtmoreHdrViewImpl voCEIXStsWaybillBtmoreHdrVOImpl =
            (CeixStsWaybillBtmoreHdrViewImpl) this.getCeixStsWaybillBtmoreHdrView1();

        CeixStsWaybillBtmoreLinesViewImpl voCEIXStsWaybillBtmoreLinesVOImpl =
            (CeixStsWaybillBtmoreLinesViewImpl) this.getCeixStsWaybillBtmoreLinesView1();

        voCEIXStsWaybillBtmoreHdrVOImpl.getDBTransaction().commit();


        voCEIXStsWaybillBtmoreLinesVOImpl.getDBTransaction().commit();

        _logger.log(Level.FINER, "Commit successful");

    }
    
    private void PersistSTSDeliveryLinesWithCopyFlag() {


        _logger.log(Level.FINER, "Committing records");
        _logger.log(Level.SEVERE, "Committing STS records  after copying to Waybill");
    //    CeixStsWaybillBtmoreHdrViewImpl voCEIXStsWaybillBtmoreHdrVOImpl =
      //      (CeixStsWaybillBtmoreHdrViewImpl) this.getCeixStsWaybillBtmoreHdrView1();
        
        CeixStsDeliveryHeaderVOImpl voCeixStsDeliveryHeaderVOImpl=
(CeixStsDeliveryHeaderVOImpl)this.getCeixStsDeliveryHeaderVO1();
        
        CeixStsDeliveryLinesVOImpl voCeixStsDeliveryLinesVOImpl=
            (CeixStsDeliveryLinesVOImpl)this.getCeixStsDeliveryLinesVO1();
        
     //   CeixStsWaybillBtmoreLinesViewImpl voCEIXStsWaybillBtmoreLinesVOImpl =
       //     (CeixStsWaybillBtmoreLinesViewImpl) this.getCeixStsWaybillBtmoreLinesView1();

    //    voCEIXStsWaybillBtmoreHdrVOImpl.getDBTransaction().commit();
        
    voCeixStsDeliveryHeaderVOImpl.getDBTransaction().commit();

   //     voCEIXStsWaybillBtmoreLinesVOImpl.getDBTransaction().commit();
   voCeixStsDeliveryLinesVOImpl.getDBTransaction().commit();

        _logger.log(Level.FINER, "Commit successful");
        _logger.log(Level.SEVERE, "Commit successful");

    }

    private void rollbackRecordsBTMORERecordsForCopyToWaybill() {


        _logger.log(Level.FINER, "Rolling back records");
        CeixStsWaybillBtmoreHdrViewImpl voCEIXStsWaybillBtmoreHdrVOImpl =
            (CeixStsWaybillBtmoreHdrViewImpl) this.getCeixStsWaybillBtmoreHdrView1();

        CeixStsWaybillBtmoreLinesViewImpl voCEIXStsWaybillBtmoreLinesVOImpl =
            (CeixStsWaybillBtmoreLinesViewImpl) this.getCeixStsWaybillBtmoreLinesView1();

        voCEIXStsWaybillBtmoreHdrVOImpl.getDBTransaction().rollback();


        voCEIXStsWaybillBtmoreLinesVOImpl.getDBTransaction().rollback();

        _logger.log(Level.FINER, "rollback successful");

    }

    private CeixStsWaybillBtmoreHdrViewRowImpl saveBTMOREHeaderForCopyToWaybill(CeixStsWaybillBtmoreHdrViewRowImpl row,
                                                                                Row stsDeliveryHeader,
                                                                                oracle.jbo.domain.Date dumpedDate
                                                                                ) {

        _logger.log(Level.FINER, ">>saveBTMOREHeaderForCopyToWaybill");
        //check if a header record already exists by train number and load date
        //if record already exists, update the record, else create new row
        CeixStsWaybillBtmoreHdrViewImpl voCEIXStsWaybillBtmoreHdrVOImpl =
            (CeixStsWaybillBtmoreHdrViewImpl) this.getCeixStsWaybillBtmoreHdrView1();

        if (row != null) {

            setBTMOREHeaderAttributesForCopyToWaybill(row, stsDeliveryHeader, dumpedDate);
            _logger.log(Level.FINER, "existing header row id: " + row.getDeliveryHeaderId());
        } else {

            _logger.log(Level.FINER, "Creating new header row");

            row = (CeixStsWaybillBtmoreHdrViewRowImpl) voCEIXStsWaybillBtmoreHdrVOImpl.createRow();
            setBTMOREHeaderAttributesForCopyToWaybill(row, stsDeliveryHeader, dumpedDate);
            voCEIXStsWaybillBtmoreHdrVOImpl.insertRow(row);

            _logger.log(Level.FINER, "New header row delivery header id:" + row.getDeliveryHeaderId());
        }

        return row;
    }

    private void setBTMOREHeaderAttributesForCopyToWaybill(CeixStsWaybillBtmoreHdrViewRowImpl btmoreHeaader,
                                                           Row stsDeliveryHeader, oracle.jbo.domain.Date dumpedDate) {

        String trainNum =
            stsDeliveryHeader.getAttribute("UnitTrainNumber") != null ?
            stsDeliveryHeader.getAttribute("UnitTrainNumber").toString() : null;
        Date shipDate =
            (Date) (stsDeliveryHeader.getAttribute("LoadDate1") != null ? 
            stsDeliveryHeader.getAttribute("LoadDate1") : null);
        btmoreHeaader.setTrainNumber(trainNum);
        btmoreHeaader.setDumpedDate(dumpedDate);
        btmoreHeaader.setShipDate(shipDate);
      //  btmore

    }


    private CeixStsWaybillBtmoreHdrViewRowImpl getBTMOREHeaderRecordByKeysForCopyToWaybill(String trainNum, Date dt) {
        _logger.log(Level.FINER, "Searching btmore header row by train and load dt: " + trainNum + ", " + dt);

        boolean exists = false;
        CeixStsWaybillBtmoreHdrViewRowImpl row = null;
        CeixStsWaybillBtmoreHdrViewImpl voCEIXStsWaybillBtmoreHdrVOImpl =
            (CeixStsWaybillBtmoreHdrViewImpl) this.getCeixStsWaybillBtmoreHdrView1();

        voCEIXStsWaybillBtmoreHdrVOImpl.setNamedWhereClauseParam("trainNum", trainNum);

        voCEIXStsWaybillBtmoreHdrVOImpl.setNamedWhereClauseParam("dumpDt", dt);

        voCEIXStsWaybillBtmoreHdrVOImpl.setApplyViewCriteriaName("FindByTrainAndLoadDtlDtVOCriteria");

        voCEIXStsWaybillBtmoreHdrVOImpl.executeQuery(); //executeVO with Criteria
        long rowCount = voCEIXStsWaybillBtmoreHdrVOImpl.getEstimatedRowCount();
        if (rowCount > 0) {
            _logger.log(Level.FINER, "Header row found.");
            row = (CeixStsWaybillBtmoreHdrViewRowImpl) voCEIXStsWaybillBtmoreHdrVOImpl.next();
            exists = true;
        } else
            _logger.log(Level.FINER, "Header row not found.");

        return row;

    }


    private void saveBTMORELinesForCopyToWaybill(boolean headerRecordWasFound, Number btmoreHeaderId,
                                                 CeixStsDeliveryLinesVORowImpl stdDeliveryLine, String TrainNum,
                                                 String comments, String pile, String copyDumpedTons) throws SQLException {

        CeixStsWaybillBtmoreLinesViewRowImpl lineRow;
        if (!headerRecordWasFound) {
            _logger.log(Level.FINER, "BTMORE Header was found. Creating new line record.");
            //no header record found, so there wont be any lines as well
            lineRow = createANewBTMORELineRecordForCopyToWaybill(btmoreHeaderId, stdDeliveryLine);
            setBTMORELineAttributesForCopyToWaybill(btmoreHeaderId, lineRow, stdDeliveryLine, TrainNum, comments, pile,copyDumpedTons);
        } else {
            _logger.log(Level.FINER, "BTMORE Header was row found. Checking if line record already exists.");
            //header record found, so lines may or may not be there
            //check if line already exists, if found, update it else create a new line
            //search existing line by DELIVERY_HEADER_ID and CAR_NUMBER
            String carNumber = stdDeliveryLine.getCarId();
            lineRow = getLineRecordByKey(btmoreHeaderId, carNumber);

            if (lineRow != null) {
                //line record found
                _logger.log(Level.FINER, "line record found");

                setBTMORELineAttributesForCopyToWaybill(btmoreHeaderId, lineRow, stdDeliveryLine, TrainNum, comments,
                                                        pile,copyDumpedTons);
            } else {
                _logger.log(Level.FINER, "line record not found");
                lineRow = createANewBTMORELineRecordForCopyToWaybill(btmoreHeaderId, stdDeliveryLine);
                setBTMORELineAttributesForCopyToWaybill(btmoreHeaderId, lineRow, stdDeliveryLine, TrainNum, comments,
                                                        pile,copyDumpedTons);
            }
        }

    }
    private void saveSTSDeliveryLinesWithCopyFlag(boolean headerRecordWasFound,CeixStsDeliveryLinesVORowImpl stdDeliveryLine, String TrainNum,
                                                 String cpFlag) throws SQLException {

      //  CeixStsWaybillBtmoreLinesViewRowImpl lineRow;
     //   CeixStsDeliveryLinesVORowImpl lineRow;
        if (!headerRecordWasFound) {
            _logger.log(Level.FINER, "BTMORE Header was found. So Updating STS record with CopyFlag.");
            //no header record found, so there wont be any lines as well
         //   lineRow = createANewBTMORELineRecordForCopyToWaybill(btmoreHeaderId, stdDeliveryLine);
         //   setBTMORELineAttributesForCopyToWaybill(btmoreHeaderId, lineRow, stdDeliveryLine, TrainNum, comments, pile);     
            setSTSLineWithCopyFlag(stdDeliveryLine, TrainNum, cpFlag);
        }

    }

    private CeixStsWaybillBtmoreLinesViewRowImpl createANewBTMORELineRecordForCopyToWaybill(Number btmoreHeaderId,
                                                                                            CeixStsDeliveryLinesVORowImpl stdDeliveryLine) {

        CeixStsWaybillBtmoreLinesViewImpl voCEIXStsWaybillBtmoreLinesVOImpl =
            (CeixStsWaybillBtmoreLinesViewImpl) this.getCeixStsWaybillBtmoreLinesView1();

        //no line record found
        CeixStsWaybillBtmoreLinesViewRowImpl newRow =
            (CeixStsWaybillBtmoreLinesViewRowImpl) voCEIXStsWaybillBtmoreLinesVOImpl.createRow();

        // setBTMORELineAttributesForCopyToWaybill(btmoreHeaderId,newRow,stdDeliveryLine);

        voCEIXStsWaybillBtmoreLinesVOImpl.insertRow(newRow);

        return newRow;
    }

    private void setBTMORELineAttributesForCopyToWaybill(Number btmoreHeaderId,
                                                         CeixStsWaybillBtmoreLinesViewRowImpl btmoreLineRow,
                                                         CeixStsDeliveryLinesVORowImpl stdDeliveryLineRow,
                                                         String TrainNum, String comments,
                                                         String pile, String  copyDumpedTons) throws SQLException {

        btmoreLineRow.setDeliveryHeaderId(btmoreHeaderId);
        btmoreLineRow.setTrainNumber(stdDeliveryLineRow.getUnitTrainNumber());
        btmoreLineRow.setNewTrainNumber(stdDeliveryLineRow.getNewTrainNumber());
        btmoreLineRow.setCarNumber(stdDeliveryLineRow.getCarId());
        btmoreLineRow.setCarPrefix(stdDeliveryLineRow.getCarPrefix());
        btmoreLineRow.setDumpSequence(new oracle.jbo.domain.Number(stdDeliveryLineRow.getSequenceNum()));
        btmoreLineRow.setWeightInTons(stdDeliveryLineRow.getWeightInTons());
        btmoreLineRow.setComments(comments);
        btmoreLineRow.setSubInventory(pile);
        btmoreLineRow.setSalesOrderNumber(stdDeliveryLineRow.getSalesOrderNumber());
        btmoreLineRow.setSONUMBER(null);
        //btmoreLineRow.setAttribute1(stdDeliveryLineRow.getSONUMBER());
        btmoreLineRow.setItemNumber(stdDeliveryLineRow.getItemNumber());
        btmoreLineRow.setStraggler(stdDeliveryLineRow.getStraggler());
        btmoreLineRow.setLoadOrigin(stdDeliveryLineRow.getLoadOrigin());
        btmoreLineRow.setDestination(stdDeliveryLineRow.getDestination());
        btmoreLineRow.setFreight(stdDeliveryLineRow.getFreight());
        btmoreLineRow.setDumpWeight(copyDumpedTons);
    }
    
    private void setSTSLineWithCopyFlag(CeixStsDeliveryLinesVORowImpl stdDeliveryLineRow,
                                                         String TrainNum, String cpFlag) throws SQLException {

     Number stsDeliveryHdr= stdDeliveryLineRow.getDeliveryHeaderId();
  //       stsDeliveryHeaderId; //stdDeliveryLineRow.getDeliveryHeaderId();
   //  _logger.log(Level.FINER, "Existing Copy Flag :" +cpFlag);
     //   _logger.log(Level.SEVERE, "Existing Copy Flag :" +cpFlag);
          stdDeliveryLineRow.setCpWaybillFlag("Y");
     //   _logger.log(Level.FINER, "Copy Flag Updated for lines with DeliveryHeaderID:"+stsDeliveryHdr+"with Train Number:"+TrainNum);
       // _logger.log(Level.SEVERE, "Copy Flag Updated for lines with DeliveryHeaderID:"+stsDeliveryHdr+"with Train Number:"+TrainNum);

    }

    private CeixStsWaybillBtmoreLinesViewRowImpl getLineRecordByKey(oracle.jbo.domain.Number deliveryHeaderId,
                                                                    String carNumber) {


        _logger.log(Level.FINER,
                    "Searching line row by deliveryHeaderId and car Num: " + deliveryHeaderId + ", " + carNumber);

        boolean exists = false;
        CeixStsWaybillBtmoreLinesViewRowImpl row = null;
        CeixStsWaybillBtmoreLinesViewImpl voCEIXStsWaybillBtmoreLinesVOImpl =
            (CeixStsWaybillBtmoreLinesViewImpl) this.getCeixStsWaybillBtmoreLinesView1();
        voCEIXStsWaybillBtmoreLinesVOImpl.setNamedWhereClauseParam("deliveryHeaderId", deliveryHeaderId);

        voCEIXStsWaybillBtmoreLinesVOImpl.setNamedWhereClauseParam("carNumber", carNumber);

        voCEIXStsWaybillBtmoreLinesVOImpl.setApplyViewCriteriaName("FindByDeliveryHeaderIdAndCarNumVOCriteria");

        voCEIXStsWaybillBtmoreLinesVOImpl.executeQuery(); //executeVO with Criteria
        long rowCount = voCEIXStsWaybillBtmoreLinesVOImpl.getEstimatedRowCount();
        if (rowCount > 0) {
            _logger.log(Level.FINER, "Line row found.");
            row = (CeixStsWaybillBtmoreLinesViewRowImpl) voCEIXStsWaybillBtmoreLinesVOImpl.next();
            exists = true;
        } else
            _logger.log(Level.FINER, "Line row not found.");

        return row;

    }

    public String callManageShipmentAssignmentsImpl(String shipmentName, Long shipmentLineNum) {
        String status = null;
        STSWebServices sTSWebServices = new STSWebServices();
        status = sTSWebServices.callManageShipmentAssignments(shipmentName, shipmentLineNum);
        return status;
    }

    public Long callSplitShipmentLineImpl(Long shipmentLineNum, BigDecimal weightTons) {
        Long shipmentLineFromSplitLine = 0L;
        STSWebServices sTSWebServices = new STSWebServices();
        shipmentLineFromSplitLine = sTSWebServices.callSplitShipmentLine(shipmentLineNum, weightTons);
        return shipmentLineFromSplitLine;
    }

    public UpdateShipmentLinesResponse callUpdateShipmentLineImpl(List<ShipmentLineInformation> p_shipmentLineInformationList) {
        UpdateShipmentLinesResponse updateShipmentLinesResponse = new UpdateShipmentLinesResponse();
        STSWebServices sTSWebServices = new STSWebServices();
        updateShipmentLinesResponse = sTSWebServices.callUpdateShipmentLine(p_shipmentLineInformationList);
        return updateShipmentLinesResponse;
    }

    public String callprocessShippingCostImpl(String p_cost, BigDecimal p_Amount, Long p_shipmentLineFromSplitLine) {
        String status = null;
        STSWebServices sTSWebServices = new STSWebServices();
        status = sTSWebServices.callprocessShippingCost(p_cost, p_Amount, p_shipmentLineFromSplitLine);
        return status;
    }

    public String callProcessShipmentActionImpl(String shipmentName, String shipConfirmRule) {
        String status = null;
        STSWebServices sTSWebServices = new STSWebServices();
        status = sTSWebServices.callProcessShipmentAction(shipmentName, shipConfirmRule);
        return status;
    }

    /**
     * Container's getter for CeixStsWaybillBtmoreHdrView1.
     * @return CeixStsWaybillBtmoreHdrView1
     */
    public ViewObjectImpl getCeixStsWaybillBtmoreHdrView1() {
        return (ViewObjectImpl) findViewObject("CeixStsWaybillBtmoreHdrView1");
    }

    /**
     * Container's getter for CeixStsWaybillBtmoreLinesView1.
     * @return CeixStsWaybillBtmoreLinesView1
     */
    public ViewObjectImpl getCeixStsWaybillBtmoreLinesView1() {
        return (ViewObjectImpl) findViewObject("CeixStsWaybillBtmoreLinesView1");
    }

    /**
     * Container's getter for CeixStsWaybillBtmoreLinesView2.
     * @return CeixStsWaybillBtmoreLinesView2
     */
    public ViewObjectImpl getCeixStsWaybillBtmoreLinesView2() {
        return (ViewObjectImpl) findViewObject("CeixStsWaybillBtmoreLinesView2");
    }

    /**
     * Container's getter for CeixStsWaybillBtmoreLinesFkLink1.
     * @return CeixStsWaybillBtmoreLinesFkLink1
     */
    public ViewLinkImpl getCeixStsWaybillBtmoreLinesFkLink1() {
        return (ViewLinkImpl) findViewLink("CeixStsWaybillBtmoreLinesFkLink1");
    }

    /**
     * Container's getter for CeixStsDeliveryLinesTrainsVo1.
     * @return CeixStsDeliveryLinesTrainsVo1
     */
    public ViewObjectImpl getCeixStsDeliveryLinesTrainsVo1() {
        return (ViewObjectImpl) findViewObject("CeixStsDeliveryLinesTrainsVo1");
    }


    /**
     * Container's getter for CeixStsDeliveryHeaderDeleteTrainVo1.
     * @return CeixStsDeliveryHeaderDeleteTrainVo1
     */
    public ViewObjectImpl getCeixStsDeliveryHeaderDeleteTrainVo1() {
        return (ViewObjectImpl) findViewObject("CeixStsDeliveryHeaderDeleteTrainVo1");
    }

    /**
     * Container's getter for CeixStsDeliveryHeaderDeleteTrainEoVo1.
     * @return CeixStsDeliveryHeaderDeleteTrainEoVo1
     */
    public ViewObjectImpl getCeixStsDeliveryHeaderDeleteTrainEoVo1() {
        return (ViewObjectImpl) findViewObject("CeixStsDeliveryHeaderDeleteTrainEoVo1");
    }

    /**
     * Container's getter for CeixStsDeliveryLinesDeleteTrainsEoVo1.
     * @return CeixStsDeliveryLinesDeleteTrainsEoVo1
     */
    public ViewObjectImpl getCeixStsDeliveryLinesDeleteTrainsEoVo1() {
        return (ViewObjectImpl) findViewObject("CeixStsDeliveryLinesDeleteTrainsEoVo1");
    }

    //Added Method -*-
    public OrderImportResponse callorderImportImpl(OrderImportRequest OrderImportDtls) {
        OrderImportResponse orderImportResponse = new OrderImportResponse();
        STSWebServices sTSWebServices = new STSWebServices();
        orderImportResponse = sTSWebServices.callorderImport(OrderImportDtls);
        return orderImportResponse;
    }

    public String callinsertAndProcessInterfaceRowsImpl(List<StagedInventoryTransaction> stagedInventoryTransactionList) {
        String status = null;
        STSWebServices sTSWebServices = new STSWebServices();
        status = sTSWebServices.callinsertAndProcessInterfaceRows(stagedInventoryTransactionList);
        return status;
    }

    public String getLineStatusImpl(String salesOrderNumbr, String itemNumber) {
        //List<DeliveryDetails> delList = new ArrayList<DeliveryDetails>();
        String orderInfo = null;
        STSWebServices sTSWebServices = new STSWebServices();
        orderInfo = sTSWebServices.getLineStatus(salesOrderNumbr, itemNumber);
        return orderInfo;
    }

    public String callProcessorImpl(StagedReceivingHeader stagedReceivingHeader) {
        String status = null;
        STSWebServices sTSWebServices = new STSWebServices();
        status = sTSWebServices.callProcessor(stagedReceivingHeader);
        return status;
    }
    
    public PoReceiptBean callGetPurchaseOrderDetailsImpl(String poNum, String legalEntityName){
        String status = null;
        STSWebServices sTSWebServices = new STSWebServices();
        PoReceiptBean poReceiptBean = sTSWebServices.callGetPurchaseOrderDetails(poNum, legalEntityName);
        return poReceiptBean;
    }

    /* public Order callGetOrderDetailsImpl(String sourceTransSystem, String sourceTransNumber){
        String status = null;
        STSWebServices sTSWebServices = new STSWebServices();
        Order orderResult = sTSWebServices.callGetOrderDetails(sourceTransSystem,sourceTransNumber);
        return orderResult;
    }*/

    /**
     * Container's getter for CeixStsContractItemsVO1.
     * @return CeixStsContractItemsVO1
     */
    public CeixStsContractItemsVOImpl getCeixStsContractItemsVO1() {
        return (CeixStsContractItemsVOImpl) findViewObject("CeixStsContractItemsVO1");
    }


    /**
     * Container's getter for LoadOriginVO1.
     * @return LoadOriginVO1
     */
    public LoadOriginVOImpl getLoadOriginVO1() {
        return (LoadOriginVOImpl) findViewObject("LoadOriginVO1");
    }

    /**
     * Container's getter for DestinationVO1.
     * @return DestinationVO1
     */
    public DestinationVOImpl getDestinationVO1() {
        return (DestinationVOImpl) findViewObject("DestinationVO1");
    }

    private Double getUniformTons(long rowCount, Double tons) {
        
        
        _logger.severe("Inside getUniformTons");
       Double  splitTons=(tons/rowCount);
       Double roundsplitTons = Math.round(splitTons*100.0)/100.0;
     //   Long l = new Long(rowCount);
          //  double d = l.doubleValue();
       System.out.println("splitTons:"+roundsplitTons);
        System.out.println("splitTons:"+splitTons);
      //  Double value.setPrecision(4);
      //  splitTons.
      Double truncsplitTons = BigDecimal.valueOf(splitTons)
          .setScale(4, RoundingMode.HALF_EVEN)
          .doubleValue();
        return truncsplitTons;
     //  return roundsplitTons;
        
    }
}
